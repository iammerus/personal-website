---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Card, Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths } from 'astro'
import type { CollectionEntry } from 'astro:content'

// Import images directly for optimization
import postImage1 from '@assets/images/posts/post-image-1.png'
import postImage2 from '@assets/images/posts/post-image-2.png'
import postImage3 from '@assets/images/posts/post-image-3.png'
import postImage4 from '@assets/images/posts/post-image-4.png'
import postImage5 from '@assets/images/posts/post-image-5.png'
import postImage6 from '../../assets/images/posts/post-image-6.png'

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection('blog', ({ data }) => !data.draft)
  const sortedPosts = posts.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  const postImages = [postImage1, postImage2, postImage3, postImage4, postImage5, postImage6]
  const postsWithImages = sortedPosts.map((post, index) => {
    // Use the image path from frontmatter as-is (should start with /assets/ and be in public/)
    const imagePath = post.data.image;
    return {
      ...post,
      featuredImage: imagePath ? imagePath : postImages[index % postImages.length],
      pexels_attribution: post.data.pexels_attribution,
      readingTime: Math.ceil((post.body?.length ?? 0) / 1000)
    };
  })
  return paginate(postsWithImages, { pageSize: 6 })
}) satisfies GetStaticPaths

const { page } = Astro.props
const formatDate = (date) => new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(date)
---

<DefaultLayout title="Blog" description="Insights, tutorials, and thoughts on web development, software engineering, and technology from Melvin Mupondori.">
  <PageHeader
    title="Blog"
    subtitle="Insights, tutorials, and thoughts on web development, software engineering, and technology. Sharing knowledge from real-world projects and experiences."
    bgType="bordered"
  />
  <section class="my-12">
    <div class="container">
      <p class="text-sm mb-8 text-gray-600 dark:text-gray-400">
        <em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em>
      </p>

      {/* Featured posts section (show on first page only) */}
      {page.currentPage === 1 && (
        <div class="mb-12">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Featured Posts</h2>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {page.data.filter(post => post.data.featured).slice(0, 2).map(post => (
              <article class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="aspect-w-16 aspect-h-9">
                  <img 
                    src={post.featuredImage.src || post.featuredImage} 
                    alt={post.data.title}
                    class="w-full h-48 object-cover"
                  />
                </div>
                <div class="p-6">
                  <div class="flex items-center gap-4 mb-3 text-sm text-gray-600 dark:text-gray-400">
                    <span class="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-medium">
                      {post.data.category}
                    </span>
                    <time datetime={post.data.publishDate.toISOString()}>
                      {formatDate(post.data.publishDate)}
                    </time>
                    <span>{post.readingTime} min read</span>
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                    <a href={`/blog/${post.id}`} class="hover:underline">
                      {post.data.title}
                    </a>
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                    {post.data.description}
                  </p>
                  <div class="flex flex-wrap gap-2 mb-4">
                    {post.data.tags?.slice(0, 3).map(tag => (
                      <span class="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded text-xs">
                        #{tag}
                      </span>
                    ))}
                  </div>
                  <a 
                    href={`/blog/${post.id}`}
                    class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium"
                  >
                    Read more 
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </a>
                </div>
                {post.pexels_attribution && (
                  <div class="mt-2 text-xs text-gray-500 dark:text-gray-400 flex items-center gap-2">
                    <span>Photo by </span>
                    <a href={post.pexels_attribution.photographer_url} target="_blank" rel="noopener" class="underline hover:text-blue-600">
                      {post.pexels_attribution.photographer}
                    </a>
                    <span>on</span>
                    <a href={post.pexels_attribution.photo_url} target="_blank" rel="noopener" class="underline hover:text-blue-600">
                      Pexels
                    </a>
                  </div>
                )}
              </article>
            ))}
          </div>
        </div>
      )}

      {/* All posts grid */}
      <div class="mb-8">
        {page.currentPage > 1 && (
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">All Posts</h2>
        )}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {page.data.map(post => (
            <Card
              imageComponent={post.featuredImage}
              url={`/blog/${post.id}`}
              title={post.data.title}
              footer={`${post.data.author} • ${formatDate(post.data.publishDate)} • ${post.readingTime} min read`}
            >
              <div class="space-y-3">  
                <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-3">
                  {post.data.description}
                </p>
                <div class="flex flex-wrap gap-1">
                  {post.data.tags?.slice(0, 2).map(tag => (
                    <span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-1 rounded text-xs">
                      #{tag}
                    </span>
                  ))}
                </div>
                <div class="text-xs text-gray-500 dark:text-gray-500">
                  <span class="bg-gray-50 dark:bg-gray-800 px-2 py-1 rounded">
                    {post.data.category}
                  </span>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
      <div class="mt-12 grid place-content-center">
        <Pagination
          firstPage={page.url.prev ? '/blog' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/blog/${Math.ceil(page.total / page.size)}` : null}
          currentPage={`${page.currentPage}`}
          totalPages={`${Math.ceil(page.total / page.size)}`}
          ariaLabel="Blog pagination"
        />
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  @use '../../assets/scss/base/mixins' as *;

  .card {
    h3 {
      margin-block-end: var(--space-xs);
      line-height: 0.75;
    }

    a {
      @include text-decoration(transparent, var(--foreground-color), 4px, 2px);
    }
  }
</style>
